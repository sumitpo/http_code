#!/usr/bin/env python3
import argparse
import http.client
import sys

# 尝试导入 termcolor，失败则使用 ANSI 回退
try:
    from termcolor import colored
    USE_TERMCOLOR = True
except ImportError:
    USE_TERMCOLOR = False

# ANSI 颜色码（仅在 termcolor 未安装时使用）
ANSI_COLORS = {
    'black': '\033[1;30m',
    'red': '\033[1;31m',
    'green': '\033[1;32m',
    'yellow': '\033[1;33m',
    'blue': '\033[1;34m',
    'magenta': '\033[1;35m',
    'cyan': '\033[1;36m',
    'white': '\033[1;37m',
    'reset': '\033[0m'
}

def colorize(text, color_name):
    if USE_TERMCOLOR:
        return colored(text, color_name, attrs=['bold'])
    else:
        color_code = ANSI_COLORS.get(color_name.lower(), '')
        reset_code = ANSI_COLORS['reset']
        return f"{color_code}{text}{reset_code}"

# 分类映射
categories = {
    '1': ('Informational', 'blue'),
    '2': ('Success', 'green'),
    '3': ('Redirection', 'cyan'),
    '4': ('Client Error', 'red'),
    '5': ('Server Error', 'magenta')
}

# 分类映射
code_colors = {
    '1': 'blue',     # Informational
    '2': 'green',    # Success
    '3': 'cyan',     # Redirection
    '4': 'red',      # Client Error
    '5': 'magenta'   # Server Error
}

def print_status_code(code, reason):
    color = code_colors.get(str(code)[0], 'reset')
    print(f"{colorize(f'{code} {reason}', color)}")

def list_http_codes():
    for prefix, (title, color) in categories.items():
        header = f"[{prefix}xx] {title}"
        underline = "-" * len(header)

        print(f"\n{colorize(header, color)}")
        print(colorize(underline, color))

        found = False
        for code, reason in http.client.responses.items():
            if str(code).startswith(prefix):
                print_status_code(code, reason)
                found = True
        if not found:
            print("No standard codes found.")

def main():
    parser = argparse.ArgumentParser(description="HTTP Status Code Viewer")
    parser.add_argument('-l', '--list', action='store_true', help='List all HTTP status codes')

    args = parser.parse_args()

    if args.list:
        list_http_codes()
    else:
        parser.print_help()

if __name__ == '__main__':
    main()
